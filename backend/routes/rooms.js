const express = require('express');
const router = express.Router();
const db = require('../db');
const logger = require('../logger');

// üîÅ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–æ–≤ –∏ id –∏–∑ –ª–∞—Ç–∏–Ω–∏—Ü—ã –≤ –∫–∏—Ä–∏–ª–ª–∏—Ü—É (–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)
function convertToCyrillicBlock(block) {
  if (block === 'A') return '–ê';
  if (block === 'B') return '–ë';
  if (block === 'V') return '–í';
  return block;
}

function convertToCyrillicId(id) {
  return id
    .replace(/^A/, '–ê')
    .replace(/^B/, '–ë')
    .replace(/^V/, '–í');
}

// ‚úÖ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–æ–º–Ω–∞—Ç—ã
router.get('/all', async (req, res) => {
  try {
    const result = await db.query('SELECT * FROM rooms');

    const transformed = result.rows.map(room => ({
      ...room,
      displayBlock: convertToCyrillicBlock(room.block),
      displayId: convertToCyrillicId(room.id)
    }));

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –±–ª–æ–∫–∞–º: A ‚Üí B ‚Üí V
    const blockOrder = ['A', 'B', 'V'];
    transformed.sort((a, b) => {
      const blockA = a.block;
      const blockB = b.block;

      const indexA = blockOrder.indexOf(blockA);
      const indexB = blockOrder.indexOf(blockB);

      if (indexA !== indexB) return indexA - indexB;
      if (a.floor !== b.floor) return a.floor - b.floor;
      return a.id.localeCompare(b.id);
    });

    logger.info("üì¶ –ö–æ–º–Ω–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã (/api/rooms/all)");
    res.json(transformed);
  } catch (error) {
    logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç: " + error.message);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç" });
  }
});

// ‚úÖ –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π: –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ (—É—á–∏—Ç—ã–≤–∞—è —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤)
router.get('/status', async (req, res) => {
  try {
    const result = await db.query(`
      SELECT 
        r.id,
        r.places,
        COUNT(a.*) FILTER (WHERE a.has_left = false) AS occupied
      FROM rooms r
      LEFT JOIN selections s ON s.room_id = r.id
      LEFT JOIN accommodation a ON a.student_id = s.student_id
      GROUP BY r.id, r.places
    `);
    
    logger.info("üìä –ü–æ–ª—É—á–µ–Ω –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –∫–æ–º–Ω–∞—Ç (/api/rooms/status)");

    const status = {};
    result.rows.forEach(r => {
      status[r.id] = {
        occupied: parseInt(r.occupied, 10),
        places: r.places
      };
    });

    res.json(status);
  } catch (error) {
    logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–Ω–∞—Ç: " + error.message);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞" });
  }
});

// ‚úÖ –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ
router.get('/:roomId', async (req, res) => {
  const roomId = req.params.roomId;
  try {
    const result = await db.query('SELECT * FROM rooms WHERE id = $1', [roomId]);

    if (result.rows.length === 0) {
      logger.warn(`‚ö†Ô∏è –ö–æ–º–Ω–∞—Ç–∞ ${roomId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      return res.status(404).json({ error: "–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
    }

    const room = result.rows[0];
    const response = {
      ...room,
      displayBlock: convertToCyrillicBlock(room.block),
      displayId: convertToCyrillicId(room.id)
    };

    logger.info(`üì• –ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);
    res.json(response);
  } catch (error) {
    logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã: " + error.message);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–Ω–∞—Ç—ã" });
  }
});

module.exports = router;