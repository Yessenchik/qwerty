// üö® –í–ê–ñ–ù–û: –õ–æ–≥–∏—Ä—É–µ—Ç—Å—è –∫–∞–∂–¥–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å IP, User-Agent –∏ –¥–µ—Ç–∞–ª—è–º–∏ —Ñ–∞–π–ª–æ–≤
const express = require("express");
const multer = require("multer");
const path = require("path");
const fs = require("fs");

const router = express.Router();

// üìÅ –ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
const destinationRoot = process.env.DESTINATION_ROOT || path.join(__dirname, '..', '..', '..', 'studentsdocs');
fs.mkdirSync(destinationRoot, { recursive: true });

// –ö–µ—à –¥–ª—è –§–ò–û
let cachedFullName = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π";

function sanitizeName(s) {
  return String(s || '')
    .replace(/[\\/:*?"<>|]/g, '_')     // –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö —Å–∏–º–≤–æ–ª—ã
    .replace(/\.{2,}/g, '.')            // –º–Ω–æ–≥–æ—Ç–æ—á–∏—è
    .replace(/\s+/g, ' ')               // –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    .trim();
}

function getAcademicYearFolder(settleDateStr) {
  const d = settleDateStr ? new Date(settleDateStr) : null;
  if (!d || isNaN(d)) return 'unknown-year';
  const year = d.getFullYear();
  const month = d.getMonth() + 1;
  const startYear = month >= 8 ? year : year - 1;
  const endYear = startYear + 1;
  return `${startYear} - ${endYear}`;
}

// ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    const ln = sanitizeName(req.body && req.body.lastName);
    const fn = sanitizeName(req.body && req.body.firstName);
    const mn = sanitizeName(req.body && req.body.middleName);
    cachedFullName = `${ln} ${fn} ${mn}`.trim();
    if (!cachedFullName) {
      cachedFullName = `unknown-${Date.now()}`;
    }

    const settleDate = (req.query && req.query.moveInDate) || (req.body && (req.body.settlementDate || req.body.moveInDate));
    if (!settleDate) {
      console.warn('No move-in date provided; using fallback folder');
    }

    const academicFolder = getAcademicYearFolder(settleDate);
    const academicPath = path.join(destinationRoot, academicFolder);
    const studentDir = path.join(academicPath, cachedFullName);

    fs.mkdirSync(studentDir, { recursive: true });
    return cb(null, studentDir);
  },

  filename: (req, file, cb) => {
    let ext = path.extname(file.originalname).toLowerCase();
    if (!ext) {
      if (file.mimetype === "application/pdf") ext = ".pdf";
      else if (file.mimetype === "image/jpeg") ext = ".jpeg";
      else if (file.mimetype === "image/png") ext = ".png";
      else ext = ".bin";
    }

    let name = "";
    if (file.fieldname === "idCard") {
      name = `–£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏ ${cachedFullName}${ext}`;
    } else if (file.fieldname === "universityProof") {
      name = `–°–ø—Ä–∞–≤–∫–∞ —Å –º–µ—Å—Ç–∞ —É—á—ë–±—ã ${cachedFullName}${ext}`;
    } else if (file.fieldname === "selfie") {
      name = `–§–æ—Ç–æ ${cachedFullName}${ext}`;
    } else if (file.fieldname === "fluorography") {
      name = `–°–Ω–∏–º–æ–∫ —Ñ–ª—é–æ—Ä–æ–≥—Ä–∞—Ñ–∏–∏ ${cachedFullName}${ext}`;
    } else if (file.fieldname === "dormReferral") {
      name = `–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –æ–±—â–µ–∂–∏—Ç–∏–µ ${cachedFullName}${ext}`;
    } else {
      name = `${file.fieldname} ${cachedFullName}${ext}`;
    }

    const settleDate = (req.query && req.query.moveInDate) || (req.body && (req.body.settlementDate || req.body.moveInDate));
    const academicFolder = getAcademicYearFolder(settleDate);
    const studentDir = path.join(destinationRoot, academicFolder, cachedFullName);
    if (!fs.existsSync(studentDir)) fs.mkdirSync(studentDir, { recursive: true });

    const baseName = name.replace(ext, "");
    const existingFiles = fs.readdirSync(studentDir);
    existingFiles.forEach(file => {
      if (file.startsWith(baseName) && file !== name) {
        fs.unlinkSync(path.join(studentDir, file));
      }
    });

    console.log("üì¶ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª:", name);
    console.log("üìé MIME —Ç–∏–ø:", file.mimetype);
    cb(null, name);
  }
});

const upload = multer({
  storage,
  limits: { fileSize: 50 * 1024 * 1024 } // 50MB –Ω–∞ —Ñ–∞–π–ª
});

// Health check for quick connectivity tests
router.get('/health', (req, res) => {
  res.json({ ok: true, uptime: process.uptime() });
});

router.post(
  "/",
  upload.fields([
    { name: "idCard", maxCount: 1 },
    { name: "universityProof", maxCount: 1 },
    { name: "selfie", maxCount: 1 },
    { name: "fluorography", maxCount: 1 },
    { name: "dormReferral", maxCount: 1 },
  ]),
  (req, res) => {
    console.log("üì• –ü–æ–ª—É—á–µ–Ω POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤");
    const ip = req.headers["x-forwarded-for"] || req.socket.remoteAddress;
    const userAgent = req.headers["user-agent"];
    console.log("üåê IP-–∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞:", ip);
    console.log("üß≠ User-Agent:", userAgent);
    const {
      firstName,
      lastName,
      middleName,
      documentNumber,
      documentIssueDate,
      documentIssuer,
      isGraduate,
      hasDisability,
      iin,
      phone,
      email,
      university,
      room,
      block,
      registrationAddress
    } = req.body;

    const fullName = sanitizeName(`${lastName} ${firstName} ${middleName || ""}`.trim());
    const settleDate = (req.query && req.query.moveInDate) || (req.body && (req.body.settlementDate || req.body.moveInDate));
    const academicFolder = getAcademicYearFolder(settleDate);
    const studentDir = path.join(destinationRoot, academicFolder, fullName);

    console.log("üßæ req.body:", req.body);
    console.log("üìÇ req.files:", req.files);

    if (!firstName || !lastName) {
      return res.status(400).json({ success: false, message: "–§–ò–û –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ" });
    }

    const idCardOk = req.files?.idCard?.length > 0;
    const proofOk = req.files?.universityProof?.length > 0;
    const selfieOk = req.files?.selfie?.length > 0;
    const fluorographyOk = req.files?.fluorography?.length > 0;
    const dormReferralOk = req.files?.dormReferral?.length > 0;

    if (!idCardOk || !proofOk || !selfieOk || !fluorographyOk || !dormReferralOk) {
      console.warn("‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:", {
        idCard: idCardOk,
        universityProof: proofOk,
        selfie: selfieOk,
        fluorography: fluorographyOk,
        dormReferral: dormReferralOk,
      });
      console.warn("‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö:", req.files);
      console.error("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –§–∞–π–ª—ã:", Object.keys(req.files || {}));
      return res.status(400).json({
        success: false,
        message: "–ù–µ –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã",
      });
    }
    if (!req.files?.selfie || req.files.selfie.length === 0) {
      console.warn("‚ö†Ô∏è –°–µ–ª—Ñ–∏ –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ!");
    } else {
      console.log("üì∏ –°–µ–ª—Ñ–∏ –ø–æ–ª—É—á–µ–Ω–æ:", req.files.selfie[0].originalname);
    }

    console.log("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è:", fullName);
    console.log("üìÑ –ü–æ–ª—É—á–µ–Ω—ã —Ñ–∞–π–ª—ã:", Object.keys(req.files));

    // üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞
    /*
    try {
      const PizZip = require("pizzip");
      const Docxtemplater = require("docxtemplater");
      const contractTemplate = fs.readFileSync(path.join(__dirname, "../templates/contract-template.docx"), "binary");
      const zip = new PizZip(contractTemplate);
      const doc = new Docxtemplater(zip, { paragraphLoop: true, linebreaks: true });

      const contractData = {
        fio: fullName,
        iin: iin || "000000000000",
        phone: phone || "",
        email: email || "",
        university: university || "",
        documentNumber: documentNumber || "",
        documentIssueDate: documentIssueDate || "",
        documentIssuer: documentIssuer || "",
        hasDisability: hasDisability || "",
        isGraduate: isGraduate || "",
        room: room || "___",
        block: block || "___",
        date: new Date().toLocaleDateString("ru-RU"),
        registrationAddress: registrationAddress || "–≥. –ê—Å—Ç–∞–Ω–∞"
      };

      doc.setData(contractData);
      doc.render();
      const buf = doc.getZip().generate({ type: "nodebuffer" });

      const contractPath = path.join(studentDir, `–î–æ–≥–æ–≤–æ—Ä ${fullName}.docx`);
      fs.writeFileSync(contractPath, buf);
      console.log("üìÑ –î–æ–≥–æ–≤–æ—Ä —Å–æ–∑–¥–∞–Ω:", contractPath);
    } catch (e) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–≥–æ–≤–æ—Ä–∞:", e);
    }
    */

    console.log("üìä –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–æ–ª—è —Ñ–∞–π–ª–æ–≤:");
    Object.entries(req.files).forEach(([field, files]) => {
      files.forEach(f => {
        console.log(`üîπ ${field}: ${f.originalname}, ${f.size} –±–∞–π—Ç`);
      });
    });

    console.log("‚úÖ –í—Å–µ 5 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã");
    console.log("üì§ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É");
    res.json({ success: true, message: "–î–æ–∫—É–º–µ–Ω—Ç—ã –∏ –¥–æ–≥–æ–≤–æ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã" });
  }
);

// Multer & generic error handler for uploads
// eslint-disable-next-line no-unused-vars
router.use((err, req, res, next) => {
  if (err && err.code === 'LIMIT_FILE_SIZE') {
    return res.status(413).json({ success: false, message: '–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º—É–º 50MB –Ω–∞ —Ñ–∞–π–ª.' });
  }
  if (err && err.message) {
    return res.status(400).json({ success: false, message: err.message });
  }
  next(err);
});

module.exports = router;