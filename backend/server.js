const express = require("express");
const path = require("path");
const http = require("http");
const dotenv = require("dotenv");
dotenv.config();
const helmet = require("helmet");
const compression = require("compression");
const morgan = require("morgan");
const rateLimit = require("express-rate-limit");
const crypto = require("node:crypto");
const isProd = process.env.NODE_ENV === 'production';

const app = express();
// –µ—Å–ª–∏ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞ –ø—Ä–æ–∫—Å–∏/–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫–æ–º
app.set("trust proxy", 1);
const cors = require("cors");
app.use(cors({
  origin: (origin, cb) => {
    if (!isProd) return cb(null, true);
    const allowed = (process.env.CORS_ORIGIN || '').split(',').map(s => s.trim()).filter(Boolean);
    if (!origin || allowed.length === 0 || allowed.includes(origin)) return cb(null, true);
    cb(new Error('Not allowed by CORS'));
  },
  credentials: true,
  methods: ["GET","HEAD","POST","PUT","PATCH","DELETE","OPTIONS"],
}));
const server = http.createServer(app);
// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–π–º–∞—É—Ç–æ–≤ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç slowloris –∏ –∑–∞–≤–∏—Å–∞–Ω–∏–π
server.requestTimeout = 30_000;      // 30s –Ω–∞ –≤–µ—Å—å –∑–∞–ø—Ä–æ—Å
server.headersTimeout = 65_000;      // –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å > keepAliveTimeout
server.keepAliveTimeout = 60_000;    // idle timeout —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
// server.maxRequestsPerSocket = 0;  // –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–æ–∫–µ—Ç
app.disable('x-powered-by');

// üìë Request ID + –ª–æ–≥–∏
morgan.token('id', (req) => req.id);
app.use((req, res, next) => {
  req.id = crypto.randomUUID();
  res.setHeader('X-Request-Id', req.id);
  next();
});
app.use(morgan(':date[iso] :id :method :url :status :response-time ms - :res[content-length]'));

// üì¶ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
const db = require("./db");
app.locals.db = db;

// üîÅ –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è has_left
async function autoUpdateHasLeft() {
  try {
    await db.query(`
      UPDATE accommodation
      SET has_left = true
      WHERE left_date < CURRENT_DATE AND has_left = false
    `);
    console.log("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: has_left –æ–±–Ω–æ–≤–ª—ë–Ω –¥–ª—è –∏—Å—Ç—ë–∫—à–∏—Ö —Å—Ä–æ–∫–æ–≤ –∞—Ä–µ–Ω–¥—ã");
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ has_left:", err.message);
  }
}

// ‚è±Ô∏è –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ has_left (–∫–∞–∂–¥—ã–π —á–∞—Å) –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
(async () => {
  try {
    await autoUpdateHasLeft();
  } catch (e) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ autoUpdateHasLeft:", e.message);
  }
})();
setInterval(() => {
  autoUpdateHasLeft().catch((e) => console.error("‚ùå –û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ–∑–∞–¥–∞—á–µ autoUpdateHasLeft:", e.message));
}, 60 * 60 * 1000);

// üîå WebSocket
require("./websocket")(server);

// üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å + –∫–æ–º–ø—Ä–µ—Å—Å–∏—è (—Ç–æ–ª—å–∫–æ –≤ –ø—Ä–æ–¥–µ)
if (isProd) {
  app.use(helmet({
    crossOriginResourcePolicy: { policy: "cross-origin" },
  }));
  app.use(compression());
} else {
  console.log('DEV mode: helmet/compression –≤—ã–∫–ª—é—á–µ–Ω—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –æ—Ç–ª–∞–¥–∫–∏');
}

// üì¶ Middleware
app.use(express.json({ limit: "10mb" }));
app.use(express.urlencoded({ extended: true, limit: "10mb", parameterLimit: 10000 }));
// –û—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON -> 400 –≤–º–µ—Å—Ç–æ 500
app.use((err, req, res, next) => {
  if (err instanceof SyntaxError && 'body' in err) {
    return res.status(400).json({ success: false, error: 'Invalid JSON' });
  }
  next(err);
});

// üîÅ API –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è has_left
app.post("/api/update-has-left", async (req, res) => {
  try {
    await autoUpdateHasLeft();
    res.json({ success: true });
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ has_left:", err.message);
    res.status(500).json({ success: false, error: err.message });
  }
});

// ‚ù§Ô∏è Healthcheck
app.get("/health", async (req, res) => {
  const started = Date.now();
  let dbOk = false;
  try {
    await db.query("SELECT 1");
    dbOk = true;
  } catch (e) {
    console.error("‚ùå Health DB check failed:", e.message);
  }
  res.json({ ok: true, uptime: process.uptime(), db: dbOk, responseTimeMs: Date.now() - started, timestamp: new Date().toISOString() });
});
// üîñ –í–µ—Ä—Å–∏—è —Å–±–æ—Ä–∫–∏
app.get('/version', (req, res) => {
  res.json({
    version: process.env.APP_VERSION || 'dev',
    commit: process.env.GIT_SHA || null,
    node: process.version,
    time: new Date().toISOString(),
  });
});

// üö¶ Rate limiting (–≤ –ø—Ä–æ–¥–µ). –í DEV –æ—Ç–∫–ª—é—á–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
if (isProd) {
  const apiLimiter = rateLimit({
    windowMs: 15 * 60 * 1000,
    max: 1000,
    standardHeaders: true,
    legacyHeaders: false,
    skip: (req) => req.method === 'GET', // –Ω–µ –ª–∏–º–∏—Ç–∏—Ä—É–µ–º GET-–∑–∞–ø—Ä–æ—Å—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  });
  app.use('/api', apiLimiter);

  const uploadLimiter = rateLimit({
    windowMs: 10 * 60 * 1000,
    max: 200,
    standardHeaders: true,
    legacyHeaders: false,
  });
  app.use('/api/upload', uploadLimiter);
} else {
  console.log('DEV mode: rate limiting –æ—Ç–∫–ª—é—á–µ–Ω');
}

// üìÇ –†–æ—É—Ç—ã
const studentsRouter = require("./routes/students");
const roomsRouter = require("./routes/rooms");
const checkIinRoute = require("./routes/checkIin");
const uploadRouter = require("./routes/upload");
const { contractRouter } = require("./routes/generateContract");
const exportExcelRouter = require('./routes/exportExcel');

app.use('/api/export-excel', exportExcelRouter);
app.use(contractRouter);
app.use("/api/check-iin", checkIinRoute);
app.use("/api/students", studentsRouter);
app.use("/api/rooms", roomsRouter);
app.use("/api/upload", uploadRouter);

// üßæ –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ frontend —Ñ–∞–π–ª–æ–≤
if (isProd) {
  app.use(express.static(path.join(__dirname, "../frontend"), {
    maxAge: '7d',
    immutable: true,
    etag: true,
    lastModified: true,
  }));
} else {
  app.use(express.static(path.join(__dirname, "../frontend"), {
    etag: false,
    lastModified: false,
    maxAge: 0,
  }));
}

// –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è HTML-—Å—Ç—Ä–∞–Ω–∏—Ü (–∞–∫—Ç—É–∞–ª—å–Ω–æ –¥–ª—è –ª—é–±—ã—Ö —Ä–µ–∂–∏–º–æ–≤)
app.use((req, res, next) => {
  if (req.path.endsWith('.html') || req.path === '/' || req.path === '/st') {
    res.setHeader('Cache-Control', 'no-store');
  }
  next();
});

// üåê –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get("/", (req, res) => {
  res.sendFile(path.join(__dirname, "../frontend/form-personal.html"));
});

// üîó –ö–æ—Ä–æ—Ç–∫–∏–π –ø—É—Ç—å /st ‚Üí statistics.html
app.get("/st", (req, res) => {
  res.sendFile(path.join(__dirname, "../frontend/statistics.html"));
});

// 404 Not Found
app.use((req, res, next) => {
  res.status(404).json({ success: false, error: "Not Found" });
});

// Centralized error handler
// eslint-disable-next-line no-unused-vars
app.use((err, req, res, next) => {
  console.error("üí• Unhandled error:", err && err.stack ? err.stack : err);
  res.status(500).json({ success: false, error: "Internal Server Error" });
});

// üõë Graceful shutdown
async function shutdown(signal) {
  try {
    console.log(`\n${signal} –ø–æ–ª—É—á–µ–Ω. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä...`);
    await new Promise((resolve) => server.close(resolve));
    console.log("HTTP —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
    if (db && typeof db.end === "function") {
      try {
        await db.end();
        console.log("–ü—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –ë–î –∑–∞–∫—Ä—ã—Ç.");
      } catch (e) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ë–î:", e.message);
      }
    }
  } finally {
    process.exit(0);
  }
}

process.on("SIGINT", () => shutdown("SIGINT"));
process.on("SIGTERM", () => shutdown("SIGTERM"));
process.on("unhandledRejection", (reason) => {
  console.error("Unhandled Rejection:", reason);
});
process.on("uncaughtException", (err) => {
  console.error("Uncaught Exception:", err);
});

// üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö (–¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ —Å–µ—Ç–∏)
const PORT = process.env.PORT || 3000;
server.listen(PORT, "0.0.0.0", () => {
  console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: http://localhost:${PORT} (–∏–ª–∏ http://<—Ç–≤–æ–π-IP>:${PORT})`);
});